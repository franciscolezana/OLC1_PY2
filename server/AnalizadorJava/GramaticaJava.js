/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaJava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[5,9,16],$V3=[1,15],$V4=[1,13],$V5=[1,14],$V6=[11,12],$V7=[1,36],$V8=[1,34],$V9=[1,48],$Va=[1,49],$Vb=[1,50],$Vc=[1,51],$Vd=[1,52],$Ve=[1,53],$Vf=[1,46],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[1,43],$Vk=[1,42],$Vl=[1,44],$Vm=[1,45],$Vn=[1,47],$Vo=[2,14,19,40,41,42,43,44,45,71,72,73,76,77,78,79,81,84,85,87],$Vp=[2,39],$Vq=[1,61],$Vr=[1,74],$Vs=[1,67],$Vt=[1,66],$Vu=[1,65],$Vv=[1,64],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[14,70],$VD=[11,38,46],$VE=[1,94],$VF=[1,92],$VG=[1,93],$VH=[1,95],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,104],$VR=[1,105],$VS=[1,106],$VT=[1,107],$VU=[11,15,34,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,82],$VV=[1,119],$VW=[34,46],$VX=[11,34,46,52,53,82],$VY=[11,34,46,47,48,52,53,55,56,57,58,59,60,61,62,82],$VZ=[11,15,34,46,47,48,49,52,53,55,56,57,58,59,60,61,62,82],$V_=[11,34,46,52,53,55,56,57,59,61,62,82],$V$=[11,34,46,52,53,55,56,57,58,59,60,61,62,82],$V01=[11,34,46,52,53,55,56,61,62,82],$V11=[1,175],$V21=[81,84],$V31=[2,14,19,40,41,42,43,44,45,71,72,73,75,76,77,78,79,81,84,85,87];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INI":4,"EOF":5,"LISTA":6,"IMPORT":7,"CLASE":8,"Rimport":9,"LI":10,"PuntoComa":11,"Punto":12,"TK":13,"tk_id":14,"Por":15,"Rclass":16,"LlaveAbre":17,"CODIGO":18,"LlaveCierra":19,"SENTENCIAS":20,"DECLARACION":21,"ASIGNACION":22,"METODO":23,"RETURN":24,"IF":25,"FOR":26,"WHILE":27,"DO_WHILE":28,"SWITCH":29,"BREAK":30,"CONTINUE":31,"ParAbre":32,"VALOR_LLAMADA":33,"ParCierra":34,"PRINT":35,"TIPO":36,"LISTA_ID":37,"Igual":38,"EXPRESION":39,"Rint":40,"Rboolean":41,"Rstring":42,"Rchar":43,"Rdouble":44,"Rvoid":45,"Coma":46,"Mas":47,"Menos":48,"Division":49,"Potencia":50,"Modulo":51,"Or":52,"And":53,"Not":54,"MasMas":55,"MenosMenos":56,"Menor":57,"MenorIgual":58,"Mayor":59,"MayorIgual":60,"IgualIgual":61,"NotIgual":62,"tk_char":63,"tk_cadena":64,"tk_decimal":65,"tk_entero":66,"Rtrue":67,"Rfalse":68,"LISTA_PARAMETROS":69,"Rmain":70,"Rcontinue":71,"Rreturn":72,"Rif":73,"LISTA_EI":74,"Relse":75,"Rfor":76,"Rdo":77,"Rwhile":78,"Rswitch":79,"LISTA_CASE":80,"Rdefault":81,"DosPuntos":82,"CASO":83,"Rcase":84,"Rbreak":85,"LLAMADAS":86,"Rsystem":87,"Rout":88,"Rprint":89,"Rprintln":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"Rimport",11:"PuntoComa",12:"Punto",14:"tk_id",15:"Por",16:"Rclass",17:"LlaveAbre",19:"LlaveCierra",32:"ParAbre",34:"ParCierra",38:"Igual",40:"Rint",41:"Rboolean",42:"Rstring",43:"Rchar",44:"Rdouble",45:"Rvoid",46:"Coma",47:"Mas",48:"Menos",49:"Division",50:"Potencia",51:"Modulo",52:"Or",53:"And",54:"Not",55:"MasMas",56:"MenosMenos",57:"Menor",58:"MenorIgual",59:"Mayor",60:"MayorIgual",61:"IgualIgual",62:"NotIgual",63:"tk_char",64:"tk_cadena",65:"tk_decimal",66:"tk_entero",67:"Rtrue",68:"Rfalse",70:"Rmain",71:"Rcontinue",72:"Rreturn",73:"Rif",75:"Relse",76:"Rfor",77:"Rdo",78:"Rwhile",79:"Rswitch",81:"Rdefault",82:"DosPuntos",84:"Rcase",85:"Rbreak",87:"Rsystem",88:"Rout",89:"Rprint",90:"Rprintln"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[7,3],[10,3],[10,1],[13,1],[13,1],[13,1],[8,5],[18,2],[18,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,5],[20,1],[20,1],[21,3],[21,5],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[37,3],[37,1],[22,4],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,2],[39,2],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,4],[39,3],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[33,3],[33,1],[23,8],[23,7],[23,7],[69,4],[69,2],[31,2],[24,3],[24,2],[25,12],[25,8],[25,11],[25,7],[74,9],[74,8],[26,14],[28,9],[27,7],[29,10],[80,2],[80,1],[83,4],[30,2],[86,5],[86,4],[35,9],[35,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
    return Obj1;

break;
case 4: case 12: case 29: case 69:
addErr(no2++,"Sintactico",_$[$0].first_line,this._$.first_column,"No se esperaba el token: "+yytext);
break;
case 5:
 addAST("Import"); 
break;
case 6:
 addAST("Clase");
break;
case 7:
 add(no++,$$[$0-2],"Rimport",_$[$0-2].first_line,_$[$0-2].first_column);add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);

break;
case 8:
  add(no++,$$[$0-1],"Punto",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 10: case 76:
 add(no++,$$[$0],"tk_id",_$[$0].first_line,_$[$0].first_column);
break;
case 11:
add(no++,$$[$0],"Por",_$[$0].first_line,_$[$0].first_column); 
break;
case 13:
 add(no++,$$[$0-4],"Rclass",_$[$0-4].first_line,_$[$0-4].first_column); add(no++,$$[$0-3],"tk_id",_$[$0-3].first_line,_$[$0-3].first_column); add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column); 
 add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column);

break;
case 16:
addAST("Declaracion");
break;
case 17:
addAST("Asignacion");
break;
case 18:
addAST("Metodo");
break;
case 19:
addAST("Return");
break;
case 20:
addAST("If");
break;
case 21:
addAST("For");
break;
case 22:
addAST("While");
break;
case 23:
addAST("Do_While");
break;
case 24:
addAST("Switch");
break;
case 25:
addAST("Break");
break;
case 26:
addAST("Continue");
break;
case 27:
 add(no++,$$[$0-4],"tk_id",_$[$0-4].first_line,_$[$0-4].first_column); add(no++,$$[$0-3],"ParAbre",_$[$0-3].first_line,_$[$0-3].first_column);
 add(no++,$$[$0-1],"ParCierra",_$[$0-1].first_line,_$[$0-1].first_column);  add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);
 addAST("Llamada");
break;
case 28:
 addAST("Print");
break;
case 30:
  add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);
break;
case 31:
  add(no++,$$[$0-2],"Igual",_$[$0-2].first_line,_$[$0-2].first_column); add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);
break;
case 32:
 add(no++,$$[$0],"Rint",_$[$0].first_line,_$[$0].first_column); 
break;
case 33:
 add(no++,$$[$0],"Rboolean",_$[$0].first_line,_$[$0].first_column); 
break;
case 34:
 add(no++,$$[$0],"Rstring",_$[$0].first_line,_$[$0].first_column); 
break;
case 35:
 add(no++,$$[$0],"Rchar",_$[$0].first_line,_$[$0].first_column); 
break;
case 36:
  add(no++,$$[$0],"Rdouble",_$[$0].first_line,_$[$0].first_column);
break;
case 37:
  add(no++,$$[$0],"Rvoid",_$[$0].first_line,_$[$0].first_column);
break;
case 38:
 add(no++,$$[$0-1],"Coma",_$[$0-1].first_line,_$[$0-1].first_column);add(no++,$$[$0],"tk_id",_$[$0].first_line,_$[$0].first_column);  
break;
case 39:
 add(no++,$$[$0],"tk_id",_$[$0].first_line,_$[$0].first_column); 
break;
case 40:
 add(no++,$$[$0-2],"Igual",_$[$0-2].first_line,_$[$0-2].first_column);  add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);
break;
case 41:
 add(no++,$$[$0-1],"Mas",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 42:
 add(no++,$$[$0-1],"Menos",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 43:
 add(no++,$$[$0-1],"Por",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 44:
 add(no++,$$[$0-1],"Division",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 45:
 add(no++,$$[$0-1],"Potencia",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 46:
 add(no++,$$[$0-1],"Modulo",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 47:
 add(no++,$$[$0-1],"Or",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 48:
 add(no++,$$[$0-1],"And",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 49:
 add(no++,$$[$0-1],"Not",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 50:
 add(no++,$$[$0],"MasMas",_$[$0].first_line,_$[$0].first_column);
break;
case 51:
 add(no++,$$[$0],"MenosMenos",_$[$0].first_line,_$[$0].first_column);
break;
case 52:
 add(no++,$$[$0-1],"Menos",_$[$0].first_line,_$[$0-1].first_column);
break;
case 53:
 add(no++,$$[$0-1],"Menor",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 54:
 add(no++,$$[$0-1],"MenorIgual",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 55:
 add(no++,$$[$0-1],"Mayor",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 56:
 add(no++,$$[$0-1],"MayorIgual",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 57:
 add(no++,$$[$0-1],"IgualIgual",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 58:
 add(no++,$$[$0-1],"NotIgual",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 59:
 add(no++,$$[$0-2],"ParAbre",_$[$0-2].first_line,_$[$0-2].first_column); add(no++,$$[$0],"ParAbre",_$[$0].first_line,_$[$0].first_column);
break;
case 60:
 add(no++,$$[$0-3],"tk_id",_$[$0-3].first_line,_$[$0-3].first_column);  add(no++,$$[$0-2],"ParAbre",_$[$0-2].first_line,_$[$0-2].first_column);  add(no++,$$[$0],"ParCierra",_$[$0].first_line,_$[$0].first_column);
break;
case 61:
 add(no++,$$[$0-2],"tk_id",_$[$0-2].first_line,_$[$0-2].first_column);  add(no++,$$[$0-1],"ParAbre",_$[$0-1].first_line,_$[$0-1].first_column);  add(no++,$$[$0],"ParCierra",_$[$0].first_line,_$[$0].first_column);
break;
case 62:
 add(no++,$$[$0],"tk_char",_$[$0].first_line,_$[$0].first_column);  
break;
case 63:
 add(no++,$$[$0],"tk_id",_$[$0].first_line,_$[$0].first_column);  
break;
case 64:
  add(no++,$$[$0],"tk_cadena",_$[$0].first_line,_$[$0].first_column); 
break;
case 65:
 add(no++,$$[$0],"tk_numero",_$[$0].first_line,_$[$0].first_column); 
break;
case 66:
  add(no++,$$[$0],"tk_numero",_$[$0].first_line,_$[$0].first_column); 
break;
case 67:
 add(no++,$$[$0],"Rtrue",_$[$0].first_line,_$[$0].first_column); 
break;
case 68:
 add(no++,$$[$0],"Rfalse",_$[$0].first_line,_$[$0].first_column); 
break;
case 70:
 add(no++,$$[$0-1],"Coma",_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 72:
 add(no++,$$[$0-6],"tk_id",_$[$0-6].first_line,_$[$0-6].first_column);  add(no++,$$[$0-5],"ParAbre",_$[$0-5].first_line,_$[$0-5].first_column); add(no++,$$[$0-3],"ParCierra",_$[$0-3].first_line,_$[$0-3].first_column); add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column);  add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column);
break;
case 73:
  add(no++,$$[$0-5],"tk_id",_$[$0-5].first_line,_$[$0-5].first_column);  add(no++,$$[$0-4],"ParAbre",_$[$0-4].first_line,_$[$0-4].first_column); add(no++,$$[$0-3],"ParCierra",_$[$0-3].first_line,_$[$0-3].first_column); add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column);  add(no++,$$[$0],"LlaveCierra",_$[$0-6].first_line,_$[$0].first_column);
break;
case 74:
  add(no++,$$[$0-5],"Rmain",_$[$0-5].first_line,_$[$0-5].first_column);  add(no++,$$[$0-4],"ParAbre",_$[$0-4].first_line,_$[$0-4].first_column); add(no++,$$[$0-3],"ParCierra",_$[$0-3].first_line,_$[$0-3].first_column); add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column);  add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column);
break;
case 75:
 add(no++,$$[$0-2],"Coma",_$[$0-2].first_line,_$[$0-2].first_column); add(no++,$$[$0],"tk_id",_$[$0].first_line,_$[$0].first_column);
break;
case 77:
 add(no++,$$[$0-1],"Rcontinue",_$[$0-1].first_line,_$[$0-1].first_column); add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);
break;
case 78:
 add(no++,$$[$0-2],"Rreturn",_$[$0-2].first_line,_$[$0-2].first_column); add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);
break;
case 79:
 add(no++,$$[$0-1],"Rreturn",_$[$0-1].first_line,_$[$0-1].first_column); add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);
break;
case 80:

     add(no++,$$[$0-11],"Rif",_$[$0-11].first_line,_$[$0-11].first_column); add(no++,$$[$0-10],"ParAbre",_$[$0-10].first_line,_$[$0-10].first_column);
     add(no++,$$[$0-8],"ParCierra",_$[$0-8].first_line,_$[$0-8].first_column); add(no++,$$[$0-7],"LlaveAbre",_$[$0-7].first_line,_$[$0-7].first_column);
     add(no++,$$[$0-5],"LlaveCierra",_$[$0-5].first_line,_$[$0-5].first_column); add(no++,$$[$0-3],"Relse",_$[$0-3].first_line,_$[$0-3].first_column);
     add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column); add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column); 
break;
case 81:

                 add(no++,$$[$0-7],"Rif",_$[$0-7].first_line,_$[$0-7].first_column); add(no++,$$[$0-6],"ParAbre",_$[$0-6].first_line,_$[$0-6].first_column);
                 add(no++,$$[$0-4],"ParCierra",_$[$0-4].first_line,_$[$0-4].first_column); add(no++,$$[$0-3],"LlaveAbre",_$[$0-3].first_line,_$[$0-3].first_column);
                 add(no++,$$[$0-1],"LlaveCierra",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 82:

     add(no++,$$[$0-10],"Rif",_$[$0-10].first_line,_$[$0-10].first_column); add(no++,$$[$0-9],"ParAbre",_$[$0-9].first_line,_$[$0-9].first_column);
     add(no++,$$[$0-7],"ParCierra",_$[$0-7].first_line,_$[$0-7].first_column); add(no++,$$[$0-6],"LlaveAbre",_$[$0-6].first_line,_$[$0-6].first_column);
     add(no++,$$[$0-4],"LlaveCierra",_$[$0-4].first_line,_$[$0-4].first_column); add(no++,$$[$0-3],"Relse",_$[$0-3].first_line,_$[$0-3].first_column);
     add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column); add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column); 
break;
case 83:

                 add(no++,$$[$0-6],"Rif",_$[$0-6].first_line,_$[$0-6].first_column); add(no++,$$[$0-5],"ParAbre",_$[$0-5].first_line,_$[$0-5].first_column);
                 add(no++,$$[$0-3],"ParCierra",_$[$0-3].first_line,_$[$0-3].first_column); add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column);
                 add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column);
break;
case 84:

                 add(no++,$$[$0-7],"Relse",_$[$0-7].first_line,_$[$0-7].first_column); add(no++,$$[$0-6],"Rif",_$[$0-6].first_line,_$[$0-6].first_column);
                 add(no++,$$[$0-5],"ParAbre",_$[$0-5].first_line,_$[$0-5].first_column);
                 add(no++,$$[$0-3],"ParCierra",_$[$0-3].first_line,_$[$0-3].first_column); add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column);
                 add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column);
break;
case 85:

                 add(no++,$$[$0-7],"Relse",_$[$0-7].first_line,_$[$0-7].first_column); add(no++,$$[$0-6],"Rif",_$[$0-6].first_line,_$[$0-6].first_column);
                 add(no++,$$[$0-5],"ParAbre",_$[$0-5].first_line,_$[$0-5].first_column);
                 add(no++,$$[$0-3],"ParCierra",_$[$0-3].first_line,_$[$0-3].first_column); add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column);
                 add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column);
            
break;
case 86:

                 add(no++,$$[$0-13],"Rfor",_$[$0-13].first_line,_$[$0-13].first_column); add(no++,$$[$0-12],"ParAbre",_$[$0-12].first_line,_$[$0-12].first_column);
                 add(no++,$$[$0-10],"tk_id",_$[$0-10].first_line,_$[$0-10].first_column);
                 add(no++,$$[$0-9],"Igual",_$[$0-9].first_line,_$[$0-9].first_column); add(no++,$$[$0-7],"PuntoComa",_$[$0-7].first_line,_$[$0-7].first_column);
                 add(no++,$$[$0-5],"PuntoComa",_$[$0-5].first_line,_$[$0-5].first_column);
                 add(no++,$$[$0-3],"ParCierra",_$[$0-3].first_line,_$[$0-3].first_column); add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column);
                 add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column);

break;
case 87:

     add(no++,$$[$0-8],"Rdo",_$[$0-8].first_line,_$[$0-8].first_column); add(no++,$$[$0-7],"LlaveAbre",_$[$0-7].first_line,_$[$0-7].first_column);
     add(no++,$$[$0-5],"LlaveCierra",_$[$0-5].first_line,_$[$0-5].first_column);
     add(no++,$$[$0-4],"Rwhile",_$[$0-4].first_line,_$[$0-4].first_column); add(no++,$$[$0-3],"ParAbre",_$[$0-3].first_line,_$[$0-3].first_column);
     add(no++,$$[$0-1],"ParCierra",_$[$0-1].first_line,_$[$0-1].first_column); add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);

break;
case 88:

       add(no++,$$[$0-6],"Rwhile",_$[$0-6].first_line,_$[$0-6].first_column); add(no++,$$[$0-5],"ParAbre",_$[$0-5].first_line,_$[$0-5].first_column);
     add(no++,$$[$0-3],"ParCierra",_$[$0-3].first_line,_$[$0-3].first_column);
     add(no++,$$[$0-2],"LlaveAbre",_$[$0-2].first_line,_$[$0-2].first_column); add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column);

break;
case 89:

       add(no++,$$[$0-9],"Rswitch",_$[$0-9].first_line,_$[$0-9].first_column); add(no++,$$[$0-8],"ParAbre",_$[$0-8].first_line,_$[$0-8].first_column);
     add(no++,$$[$0-6],"ParCierra",_$[$0-6].first_line,_$[$0-6].first_column);
     add(no++,$$[$0-5],"LlaveAbre",_$[$0-5].first_line,_$[$0-5].first_column); add(no++,$$[$0-3],"Rdefault",_$[$0-3].first_line,_$[$0-3].first_column);
     add(no++,$$[$0-2],"DosPuntos",_$[$0-2].first_line,_$[$0-2].first_column); add(no++,$$[$0],"LlaveCierra",_$[$0].first_line,_$[$0].first_column);

break;
case 92:
 add(no++,$$[$0-3],"Rcase",_$[$0-3].first_line,_$[$0-3].first_column); add(no++,$$[$0-1],"DosPuntos",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 93:
 add(no++,$$[$0-1],"Rbreak",_$[$0-1].first_line,_$[$0-1].first_column); add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);
break;
case 94:

     add(no++,$$[$0-4],"tk_id",_$[$0-4].first_line,_$[$0-4].first_column); add(no++,$$[$0-3],"ParAbre",_$[$0-3].first_line,_$[$0-3].first_column);
     add(no++,$$[$0-1],"ParCierra",_$[$0-1].first_line,_$[$0-1].first_column); add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);

break;
case 95:
 add(no++,$$[$0-3],"tk_id",_$[$0-3].first_line,_$[$0-3].first_column); add(no++,$$[$0-2],"ParAbre",_$[$0-2].first_line,_$[$0-2].first_column);
             add(no++,$$[$0-1],"ParCierra",_$[$0-1].first_line,_$[$0-1].first_column); add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);
            
break;
case 96:

     add(no++,$$[$0-8],"Rsystem",_$[$0-8].first_line,_$[$0-8].first_column); add(no++,$$[$0-7],"Punto",_$[$0-7].first_line,_$[$0-7].first_column);
     add(no++,$$[$0-6],"Rout",_$[$0-6].first_line,_$[$0-6].first_column); add(no++,$$[$0-5],"Punto",_$[$0-5].first_line,_$[$0-5].first_column);
     add(no++,$$[$0-4],"Rprint",_$[$0-4].first_line,_$[$0-4].first_column); add(no++,$$[$0-3],"ParAbre",_$[$0-3].first_line,_$[$0-3].first_column);
     add(no++,$$[$0-1],"ParCierra",_$[$0-1].first_line,_$[$0-1].first_column); add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column);

break;
case 97:

                 add(no++,$$[$0-8],"Rsystem",_$[$0-8].first_line,_$[$0-8].first_column); add(no++,$$[$0-7],"Punto",_$[$0-7].first_line,_$[$0-7].first_column);
     add(no++,$$[$0-6],"Rout",_$[$0-6].first_line,_$[$0-6].first_column); add(no++,$$[$0-5],"Punto",_$[$0-5].first_line,_$[$0-5].first_column);
     add(no++,$$[$0-4],"Rprintln",_$[$0-4].first_line,_$[$0-4].first_column); add(no++,$$[$0-3],"ParAbre",_$[$0-3].first_line,_$[$0-3].first_column);
     add(no++,$$[$0-1],"ParCierra",_$[$0-1].first_line,_$[$0-1].first_column); add(no++,$$[$0],"PuntoComa",_$[$0].first_line,_$[$0].first_column)
            
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,7:5,8:6,9:$V0,16:$V1},{1:[3]},{5:[1,9],6:10,7:5,8:6,9:$V0,16:$V1},o($V2,[2,3]),o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,6]),{2:$V3,10:11,13:12,14:$V4,15:$V5},{14:[1,16]},{1:[2,1]},o($V2,[2,2]),{11:[1,17],12:[1,18]},o($V6,[2,9]),o($V6,[2,10]),o($V6,[2,11]),o($V6,[2,12]),{17:[1,19]},o($V2,[2,7]),{2:$V3,13:20,14:$V4,15:$V5},{2:$V7,14:$V8,18:21,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},o($V6,[2,8]),{2:$V7,14:$V8,19:[1,54],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,18]),o($Vo,[2,19]),o($Vo,[2,20]),o($Vo,[2,21]),o($Vo,[2,22]),o($Vo,[2,23]),o($Vo,[2,24]),o($Vo,[2,25]),o($Vo,[2,26]),o([38,46],$Vp,{32:[1,56]}),o($Vo,[2,28]),o($Vo,[2,29]),{14:[1,58],37:57,70:[1,59]},{38:[1,60],46:$Vq},{2:$Vr,11:[1,63],14:$Vs,32:$Vt,39:62,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{32:[1,75]},{32:[1,76]},{32:[1,77]},{17:[1,78]},{32:[1,79]},{11:[1,80]},{11:[1,81]},{12:[1,82]},o($VC,[2,32]),o($VC,[2,33]),o($VC,[2,34]),o($VC,[2,35]),o($VC,[2,36]),o($VC,[2,37]),o($V2,[2,13]),o($Vo,[2,14]),{2:$Vr,14:$Vs,32:$Vt,33:83,39:84,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{11:[1,85],38:[1,86],46:$Vq},o($VD,$Vp,{32:[1,87]}),{32:[1,88]},{2:$Vr,14:$Vs,32:$Vt,39:89,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{14:[1,90]},{11:[1,91],15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},o($Vo,[2,79]),{2:$Vr,14:$Vs,32:$Vt,39:108,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:109,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:110,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VU,[2,63],{32:[1,111]}),o($VU,[2,62]),o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),o($VU,[2,68]),o($VU,[2,69]),{2:$Vr,14:$Vs,32:$Vt,39:112,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{36:113,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve},{2:$Vr,14:$Vs,32:$Vt,39:114,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$V7,14:$V8,18:115,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$Vr,14:$Vs,32:$Vt,39:116,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($Vo,[2,93]),o($Vo,[2,77]),{88:[1,117]},{34:[1,118],46:$VV},o($VW,[2,71],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT}),o($Vo,[2,30]),{2:$Vr,14:$Vs,32:$Vt,39:120,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{34:[1,122],36:123,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,69:121},{34:[1,124]},{11:[1,125],15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},o($VD,[2,38]),o($Vo,[2,78]),{2:$Vr,14:$Vs,32:$Vt,39:126,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:127,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:128,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:129,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:130,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:131,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:132,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:133,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VU,[2,50]),o($VU,[2,51]),{2:$Vr,14:$Vs,32:$Vt,39:134,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:135,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:136,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:137,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:138,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:139,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($VX,[2,49],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT}),o($VY,[2,52],{15:$VE,49:$VH,50:$VI,51:$VJ}),{15:$VE,34:[1,140],47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{2:$Vr,14:$Vs,32:$Vt,33:141,34:[1,142],39:84,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{15:$VE,34:[1,143],47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{14:[1,144]},{15:$VE,34:[1,145],47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{2:$V7,14:$V8,19:[1,146],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{15:$VE,34:[1,147],47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{12:[1,148]},{11:[1,149]},{2:$Vr,14:$Vs,32:$Vt,39:150,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{11:[1,151],15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{34:[1,152],46:[1,153]},{17:[1,154]},{14:[1,155]},{17:[1,156]},o($Vo,[2,40]),o($VY,[2,41],{15:$VE,49:$VH,50:$VI,51:$VJ}),o($VY,[2,42],{15:$VE,49:$VH,50:$VI,51:$VJ}),o($VZ,[2,43],{50:$VI,51:$VJ}),o($VZ,[2,44],{50:$VI,51:$VJ}),o($VU,[2,45]),o($VU,[2,46]),o([11,34,46,52,82],[2,47],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT}),o($VX,[2,48],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT}),o($V_,[2,53],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,58:$VP,60:$VR}),o($V$,[2,54],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ}),o($V_,[2,55],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,58:$VP,60:$VR}),o($V$,[2,56],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ}),o($V01,[2,57],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,57:$VO,58:$VP,59:$VQ,60:$VR}),o($V01,[2,58],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,57:$VO,58:$VP,59:$VQ,60:$VR}),o($VU,[2,59]),{34:[1,157],46:$VV},o($VU,[2,61]),{17:[1,158]},{38:[1,159]},{17:[1,160]},{78:[1,161]},{17:[1,162]},{89:[1,163],90:[1,164]},o($Vo,[2,27]),o($VW,[2,70],{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT}),o($Vo,[2,31]),{17:[1,165]},{36:166,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve},{2:$V7,14:$V8,18:167,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},o($VW,[2,76]),{2:$V7,14:$V8,18:168,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},o($VU,[2,60]),{2:$V7,14:$V8,18:169,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$Vr,14:$Vs,32:$Vt,39:170,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$V7,14:$V8,18:171,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{32:[1,172]},{80:173,83:174,84:$V11},{32:[1,176]},{32:[1,177]},{2:$V7,14:$V8,18:178,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{14:[1,179]},{2:$V7,14:$V8,19:[1,180],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$V7,14:$V8,19:[1,181],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$V7,14:$V8,19:[1,182],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{11:[1,183],15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{2:$V7,14:$V8,19:[1,184],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$Vr,14:$Vs,32:$Vt,39:185,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{81:[1,186],83:187,84:$V11},o($V21,[2,91]),{2:$Vr,14:$Vs,32:$Vt,39:188,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:189,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$Vr,14:$Vs,32:$Vt,39:190,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{2:$V7,14:$V8,19:[1,191],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},o($VW,[2,75]),o($Vo,[2,73]),o($Vo,[2,74]),o($Vo,[2,83],{74:192,75:[1,193]}),{2:$Vr,14:$Vs,32:$Vt,39:194,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($Vo,[2,88]),{15:$VE,34:[1,195],47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{82:[1,196]},o($V21,[2,90]),{15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT,82:[1,197]},{15:$VE,34:[1,198],47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{15:$VE,34:[1,199],47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},o($Vo,[2,72]),o($Vo,[2,81],{75:[1,200]}),{17:[1,201],73:[1,202]},{11:[1,203],15:$VE,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{11:[1,204]},{2:$V7,14:$V8,18:205,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$V7,14:$V8,18:206,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{11:[1,207]},{11:[1,208]},{17:[1,209],73:[1,210]},{2:$V7,14:$V8,18:211,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{32:[1,212]},{2:$Vr,14:$Vs,32:$Vt,39:213,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($Vo,[2,87]),{2:$V7,14:$V8,19:[1,214],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},o($V21,[2,92],{21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,20:55,2:$V7,14:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn}),o($Vo,[2,96]),o($Vo,[2,97]),{2:$V7,14:$V8,18:215,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{32:[1,216]},{2:$V7,14:$V8,19:[1,217],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$Vr,14:$Vs,32:$Vt,39:218,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},{15:$VE,34:[1,219],47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},o($Vo,[2,89]),{2:$V7,14:$V8,19:[1,220],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$Vr,14:$Vs,32:$Vt,39:221,48:$Vu,54:$Vv,63:$Vw,64:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB},o($Vo,[2,82]),{15:$VE,34:[1,222],47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{17:[1,223]},o($Vo,[2,80]),{15:$VE,34:[1,224],47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM,56:$VN,57:$VO,58:$VP,59:$VQ,60:$VR,61:$VS,62:$VT},{17:[1,225]},{2:$V7,14:$V8,18:226,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{17:[1,227]},{2:$V7,14:$V8,18:228,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$V7,14:$V8,19:[1,229],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$V7,14:$V8,18:230,20:22,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},{2:$V7,14:$V8,19:[1,231],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},o($Vo,[2,86]),{2:$V7,14:$V8,19:[1,232],20:55,21:23,22:24,23:25,24:26,25:27,26:28,27:29,28:30,29:31,30:32,31:33,35:35,36:37,37:38,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,45:$Ve,71:$Vf,72:$Vg,73:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,85:$Vm,87:$Vn},o($V31,[2,85]),o($V31,[2,84])],
defaultActions: {9:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let CPrimitivo=require('../JavaAST/Expresiones/Primitivo');
    let CAritmetica=require('../JavaAST/Expresiones/Aritmetica');
    let CLExpresion=require('../JavaAST/Expresiones/LExpresion');
    let CErrores=require('../JavaAST/Errores');
    let CNodoError=require('../JavaAST/NodoError');


/*    var Obj = {              
        arrSimbolos: [], 
        arrErrores: [] 
    }; 
     let arrSimbolos=[];
    var Obj = {              
        no: "1", 
        lexema: "juan", 
        tkn: "tk_id", 
        fila: "1", 
        columna: "2", 
    }
    arrSimbolos.push(Obj);
    var Obj2 = {              
        no: "2", 
        lexema: "juan2", 
        tkn: "tk_id", 
        fila: "1", 
        columna: "9", 
    }
    arrSimbolos.push(Obj2);
    var Obj3 = {              
        no: "3", 
        lexema: "juan3", 
        tkn: "tk_id", 
        fila: "1", 
        columna: "3", 
    }
    arrSimbolos.push(Obj3);
    arrSimbolos.push("1","Geeks", "for", "0","0"); 
    arrSimbolos.push("2","Geeks", "for", "0","0");
    arrSimbolos.push("3","Geeks", "for", "0","0");*/
    var Obj=new Object;
    Obj1 = {              
        arrSimbolos: [], 
        arrErrores:[],
        arrAST:[]
    }; 
    let no=0;

    function addAST(tip){
        console.log("Tipo->"+tip);
        var ObjAST = {              
        tipo: tip
        }
        Obj1.arrAST.push(ObjAST);
    }

    function add(num,lex,tk,fil,col){
        console.log("T->"+num+" "+lex+" "+tk+" "+fil+" "+col);
        var Obj = {              
        no: num,
        lexema: lex, 
        tkn: tk, 
        fila: fil, 
        columna: col, 
        }
        Obj1.arrSimbolos.push(Obj);
    }
    let no2=0;
    function addErr(num,tip,fil,col,descrip){
        console.log("T->"+num+" "+tip+" "+fil+" "+col+" "+descrip);
        var Obj3 = {              
        no: num,
        tipo: tip, 
        fila: fil, 
        columna: col, 
        descripcion: descrip, 
        }
        Obj1.arrErrores.push(Obj3);
    }

    //addErr("0","ERROR DE PRUEBA","0","0","No se esperaba el caracter: "+"ERROR");
    
    //NO LEXEMA TOKEN FILA COLUMNA
    /* Array to be inserted 
    var arraynew = ['Geeks', 'for', 'Geeks']; 
    // Push an array to object 
    Obj.arrayOne.push(arraynew); */

    //AST
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 4:  return 65;  
break;
case 5:  return 66;  
break;
case 6:return 9;
break;
case 7:return 'Rpublic';
break;
case 8:return 'Rprotected';
break;
case 9:return 'Rprivate';
break;
case 10:return 'Rfinal';
break;
case 11:return 16;
break;
case 12:return 40;
break;
case 13:return 41;
break;
case 14:return 42;
break;
case 15:return 43;
break;
case 16:return 44;
break;
case 17:return 'Robject';
break;
case 18:return 45;
break;
case 19:return 70;
break;
case 20:return 67;
break;
case 21:return 68;
break;
case 22:return 87;
break;
case 23:return 88;
break;
case 24:return 89;
break;
case 25:return 90;
break;
case 26:return 73;
break;
case 27:return 75;
break;
case 28:return 76;
break;
case 29:return 78;
break;
case 30:return 77;
break;
case 31:return 79;
break;
case 32:return 84;
break;
case 33:return 81;
break;
case 34:return 85;
break;
case 35:return 71;
break;
case 36:return 72;
break;
case 37:return 58;
break;
case 38:return 60;
break;
case 39:return 57;
break;
case 40:return 59;
break;
case 41:return 62;
break;
case 42:return 61;
break;
case 43:return 53;
break;
case 44:return 52;
break;
case 45:return 54;
break;
case 46:return 55;
break;
case 47:return 56;
break;
case 48:return 'CorcheteAbre';
break;
case 49:return 'CorcheteCierra';
break;
case 50:return 32;
break;
case 51:return 34;
break;
case 52:return 17;
break;
case 53:return 19;
break;
case 54:return 12;
break;
case 55:return 46;
break;
case 56:return 82;
break;
case 57:return 11;
break;
case 58:return 'Amper';
break;
case 59:return 47;
break;
case 60:return 48;
break;
case 61:return 15;
break;
case 62:return 49;
break;
case 63:return 50;
break;
case 64:return 51;
break;
case 65:return 38;
break;
case 66:return 14;
break;
case 67:return 'tk_letra';
break;
case 68:return 63;
break;
case 69: /*se ignoran*/ 
break;
case 70:  return 5;   
break;
case 71:addErr(no2++,"Lexico",yy_.yylineno,yy_.yylloc.first_column,"No se esperaba el caracter: "+yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:"[^\"]*")/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:[0-9]+)/,/^(?:import\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:final\b)/,/^(?:class\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:Object\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:==)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:&)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:=)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:[A-Za-zÑn])/,/^(?:'[^]')/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaJava;
exports.Parser = GramaticaJava.Parser;
exports.parse = function () { return GramaticaJava.parse.apply(GramaticaJava, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}